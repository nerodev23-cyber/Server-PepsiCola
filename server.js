// server.js
const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const rateLimit = require('express-rate-limit');
const path = require('path');
const fs = require('fs');
//const logPath = path.join(__dirname, 'logs.txt'); // ‡πÄ‡∏Å‡πá‡∏ö log 
const logsDir = path.join(__dirname, 'logs');


require('dotenv').config();

const app = express();
 const port = 3000;

// ‡∏£‡∏±‡∏ô Server ‡∏î‡πâ‡∏ß‡∏¢ nodemon is : npx nodemon server.js

const corsOptions = {
       origin: [
    'http://localhost:3000',
    'http://127.0.0.1:5500',
    'http://127.0.0.1:5501',
    'https://web-pessico.onrender.com',
    'https://web-pessico-page2.onrender.com',  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    'https://server-pepsicola-1.onrender.com' // ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
  ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Cookie']
};


app.use(express.json());
///app.use(cors());
app.use(cors(corsOptions));
app.use(cookieParser());

 app.use(express.static(path.join(__dirname, 'public'))); // ‡∏ö‡∏≠‡∏Å Express ‡∏ß‡πà‡∏≤ public ‡πÄ‡∏õ‡πá‡∏ô folder ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà browser ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‚Äù



const pool = mysql.createPool({
    host: 'gateway01.ap-southeast-1.prod.aws.tidbcloud.com', // <-- ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô Host ‡∏à‡∏≤‡∏Å TiDB
    port: 4000, // TiDB ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï 4000
    user: 'JnL6ewoYDcY1rHE.root', // Username ‡∏à‡∏≤‡∏Å TiDB
    password: 'WlVo4iUlzoP0pPUJ', // Password ‡∏à‡∏≤‡∏Å TiDB
    database: 'registercarinfo', // Database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    ssl: { rejectUnauthorized: true }, // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà ssl ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TiDB
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    dateStrings: true
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function writeLog(message) {
    try {
        // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if (!fs.existsSync(logsDir)) {
            fs.mkdirSync(logsDir, { recursive: true });
        }

        // üìÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô 2025-10-16.txt
        const today = new Date().toISOString().slice(0, 10); // yyyy-mm-dd
        const logFilePath = path.join(logsDir, `${today}.txt`);

        // üïí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
        const logMessage = `[${timestamp}] ${message}\n`;

        // ‚úçÔ∏è ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)
        fs.appendFileSync(logFilePath, logMessage, 'utf8');

        console.log('‚úÖ Log saved:', logMessage.trim());  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ß‡πâ Debug


    } catch (err) {
        console.error('‚ùå Error writing log:', err.message);
    }
}


// const pool = mysql.createPool({
//     host: 'localhost',
//     user: 'root',
//     password: '123456',
//     database: 'registercarinfo',
//     waitForConnections: true,
//     connectionLimit: 10,
//     queueLimit: 0
// });

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL



// =============================================== API ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ======================================================
// Meddleware

const meddlewareRegisterUser = rateLimit({
    windowMs: 5 * 60 * 1000, // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    max: 3, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    message: {
        error: 'Too many registration attempts. Please try again later.'
    },
    standardHeaders: true,
    legacyHeaders: false,
    skipSuccessfulRequests: true
});

// API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
app.post('/api/register', meddlewareRegisterUser, async (req, res) => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body
        const { fullName, username, password, phone, supplierName , department } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!fullName || !username || !password || !phone || !supplierName || !department) {
            return res.status(400).json({
                error: 'Please provide full name, username, password, and phone number.'
            });
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 
      //const hashedPassword = await bcrypt.hash(password, 10);

       const conn = await pool.getConnection(); // ‡∏£‡∏≠‡∏£‡∏±‡∏ö connection ‡∏à‡∏≤‡∏Å pool ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô 

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [existingUser] = await conn.execute(
            'SELECT username FROM registrationsUser WHERE username = ?',
            [username]
        );

        if (existingUser.length > 0) {
            return res.status(409).json({ error: ' User ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ' });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á accounts ‡∏î‡πâ‡∏ß‡∏¢
        const [existingAccount] = await conn.execute(
            'SELECT username FROM accounts WHERE username = ?',
            [username]
        );

        if (existingAccount.length > 0) {
            return res.status(409).json({ error: 'User ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô accounts' });
        }


        // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const sql = `
            INSERT INTO registrationsUser (full_name, username, password_hash, phone, supplier_name , department)
            VALUES (?, ?, ?, ?, ? , ?)
        `;

        const values = [
            fullName,
            username,
          //hashedPassword,
          password,
            phone,
            supplierName ,
            department
        ];

        const [result] = await conn.execute(sql, values);

         // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Register Success (‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô) =================================
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:
fullName: ${fullName}
username: ${username}
password: ${password}
phone: ${phone}
supplierName: ${supplierName}
department: ${department}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        return res.status(201).json({
            message: 'User registered successfully!',
            userId: result.insertId
        });

    } catch (error) {

         writeLog(`====================================== Register Error (‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô) =================================
username: ${req.body.username || '‡∏ß‡πà‡∏≤‡∏á'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Error during user registration:', error);
        return res.status(500).json({ error: 'Internal server error.' });
    } finally {
        if (conn) conn.release(); // ‡∏õ‡∏•‡πà‡∏≠‡∏¢ connection ‡πÄ‡∏™‡∏°‡∏≠
    }
});

// =============================================== API ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•  END ======================================================



// ============================== Login Admin or User V 2  =========================================================================

const loginLimiter = rateLimit({
    windowMs: 2 * 60 * 1000, // 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    max: 50, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤)
    message: {
        error: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ 2 ‡∏ô‡∏≤‡∏ó‡∏µ'
    },
    standardHeaders: true,
    legacyHeaders: false,
});



//const activeSessions = new Map();
const sessions = {};
const activeUsers = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö username ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á login ‡∏≠‡∏¢‡∏π‡πà

// Login route
app.post('/loginAdminandUser', loginLimiter, async (req, res) => {

    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ password' });
    }

    try {

        const conn = await pool.getConnection(); // ‡∏£‡∏≠‡∏£‡∏±‡∏ö connection ‡∏à‡∏≤‡∏Å pool ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô

        const [result] = await conn.query(
            'SELECT * FROM accounts WHERE username = ? AND password_hash = ?',
            [username, password]
        );


        if (result.length === 0) {
writeLog(`====================================== Login Failed (‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)  ‚ùå =================================
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡∏´‡∏£‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Password): ${password}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (User ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
            return res.status(401).json({ message: 'User ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const user = result[0];

                // üîπ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ User ‡∏ô‡∏µ‡πâ login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (activeUsers.has(username)) {
            const existingSession = activeUsers.get(username);
            
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ session ‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            if (existingSession.expireTime > Date.now()) {
                writeLog(`====================================== Login Rejected (‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß) üö´ =================================
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Type): ${user.type}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: üö´ ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
                return res.status(409).json({ 
                    message: '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ login ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ',
                    alreadyLoggedIn: true
                });
            } else {
                // ‡∏ñ‡πâ‡∏≤ session ‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                delete sessions[existingSession.sessionKey];
                activeUsers.delete(username);
            }
        }


      let departmentData = null;
 // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ department
    if (user.type === 'user') {
            departmentData = user.department;
        } else if (user.type == 'admin'){
            departmentData = user.department;
        } else if (user.type == 'superadmin'){
            departmentData = user.department;
        }


        // ‡∏™‡∏£‡πâ‡∏≤‡∏á session key
        const sessionKey = crypto.randomBytes(16).toString('hex');
        const expireTime = Date.now() + 24 * 60 * 60 * 1000; // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
       // const expireTime = Date.now() + 1 * 60 * 1000; //  1 ‡∏ô‡∏≤‡∏ó‡∏µ
        //const expireTime = Date.now() +  10 * 1000; // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ


        // ‡πÄ‡∏Å‡πá‡∏ö session key ‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞ user ‡∏ó‡∏µ‡πà login ‡∏ú‡πà‡∏≤‡∏ô ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà Memory sessions ‡πÅ‡∏•‡∏∞ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤ Client  // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Sorage ‡πÅ‡∏•‡πâ‡∏ß
        sessions[sessionKey] = {
            username: user.username,
            type: user.type,
            supplier: user.supplier,
            expireTime
        };

         // üîπ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á login ‡∏≠‡∏¢‡∏π‡πà
        activeUsers.set(username, {
            sessionKey: sessionKey,
            expireTime: expireTime,
            type: user.type
        });

       // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log
writeLog(`====================================== Login Success (‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à) ‚úÖ =================================
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ Login
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Type): ${user.type}
‡πÅ‡∏ú‡∏ô‡∏Å (Department): ${user.department}
‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå (Supplier): ${user.supplier}
‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
===============================================================================================
`);


        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö client
        res.json({
            message: 'Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                username: user.username,
                type: user.type,
                supplier: user.supplier,
                loginTime: Date.now(),
                sessionKey,
                expireTime,
                departmentData
            }
        });


    } catch (err) {
       
writeLog(`====================================== Login Error (‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö server / exception) ‚ö†Ô∏è =================================
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (Login)
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Server Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});


// üîπ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logout (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö session)
app.post('/logout-adminanduser', async (req, res) => {
    const { sessionKey } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];
    const username = session.username;

    // ‡∏•‡∏ö session ‡πÅ‡∏•‡∏∞ active user
    delete sessions[sessionKey];
    activeUsers.delete(username);

    writeLog(`====================================== Logout Success ‚úÖ =================================
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡πÄ‡∏ß‡∏•‡∏≤ Logout: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
===============================================================================================
`);

    res.json({
        success: true,
        message: 'Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
});

// üîπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞)
setInterval(() => {
    const now = Date.now();
    
    // ‡∏•‡∏ö sessions ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    for (const [sessionKey, session] of Object.entries(sessions)) {
        if (session.expireTime < now) {
            const username = session.username;
            delete sessions[sessionKey];
            activeUsers.delete(username);
            
            writeLog(`====================================== Session Expired üïê =================================
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Username): ${username}
‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
===============================================================================================
`);
        }
    }
}, 5 * 60 * 1000); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ



// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin and SuperAdmin ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ Register
app.post('/admin/get-regiscar-data', async (req, res) => {
    const { sessionKey, type, departmentData } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {
        let rows;

        if (type === 'admin') {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà department ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            rows = await pool.query('SELECT * FROM registrationsUser WHERE department = ?', [departmentData]);
        } else if (type === 'superadmin') {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö superadmin ‡πÄ‡∏≠‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            rows = await pool.query('SELECT * FROM registrationsUser');
        } else {
            return res.status(403).json({ message: 'Access denied' });
        }

        res.json({
            success: true,
            data: rows[0] || rows // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ mysql2 promise ‡∏à‡∏∞ return [rows, fields]
        });

                // Log ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Get-Register Data Success =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${type}, department = ${departmentData || '‡∏ß‡πà‡∏≤‡∏á'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: ${rows[0]?.length || rows.length || 0}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

    } catch (err) {

         // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Enpoint /admin/get-regiscar-data  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin and SuperAdmin ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ Register  Get-Register Data Error =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${type}, department = ${departmentData || '‡∏ß‡πà‡∏≤‡∏á'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});



// Enpoint admin and SuperAdmin ‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ê  User Register =====
app.post('/api/reject-user', async (req, res) => {
    const { sessionKey, username } = req.body;
        const session = sessions[sessionKey];
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }
   
     if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    if (session.type !== 'admin' && session.type !== 'superadmin') {
        return res.status(403).json({ message: 'Access denied. Admin only' });
    }

    if (!username) {
        return res.status(400).json({ message: 'Username is required' });
    }

    try {
        // ‡∏•‡∏ö user ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const [result] = await pool.query(
            'DELETE FROM registrationsUser WHERE username = ?',
            [username]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'User not found' });
        }


        res.json({
            success: true,
            message: `‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡∏∞‡∏•‡∏ö User ${username} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
            deletedUser: username
        });

    } catch (err) {
        console.error('Database Error:', err);
        res.status(500).json({ 
            success: false, 
            message: 'Server Error' 
        });
    }
});

// Enpoint admin and SuperAdmin ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö  User Register =====
app.post('/api/accept-user', async (req, res) => {
    const { sessionKey, userData } = req.body;

     const session = sessions[sessionKey];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sessionKey ‡∏à‡∏≤‡∏Å Memory 
    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

   
    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    if (session.type !== 'admin' && session.type !== 'superadmin') {
        return res.status(403).json({ message: 'Access denied. Admin only' });
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Req ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏≤ username ‡πÑ‡∏´‡∏° 
    if (!userData || !userData.username) {
        return res.status(400).json({ message: 'User data is required' });
    }

    try {

         await pool.query(`
            INSERT INTO accounts (fullname, username, password_hash, supplier, type , department, phone) 
            VALUES (?, ?, ?, ?, ?, ?,?)
        `, [
            userData.fullname,
            userData.username,
            userData.password_hash,
            userData.supplier_name,
            'user',
            userData.department,
            userData.phone
        ]);

        //  ‡∏•‡∏ö User ‡∏à‡∏≤‡∏Å registrationsUser (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å accept ‡πÅ‡∏•‡πâ‡∏ß)
        await pool.query(
            'DELETE FROM registrationsUser WHERE username = ?',
            [userData.username]
        );

         // Log ‡∏Å‡∏≤‡∏£ reject ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Reject User Success ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà Register =================================
‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: sessionKey = ${sessionKey}, type = ${session.type}
Username ‡∏ó‡∏µ‡πà reject: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡∏∞‡∏•‡∏ö User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

        res.json({
            success: true,
            message: `‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö User ${userData.username} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
            acceptedUser: {
                username: userData.username,
                type: 'user'
            }
        });

    } catch (err) {

         // Log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Reject User Error =================================
‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: sessionKey = ${sessionKey}, type = ${session.type}
Username ‡∏ó‡∏µ‡πà reject: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database Error:', err);
        res.status(500).json({ 
            success: false, 
            message: 'Server Error' 
        });
    }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SuperAdmin
app.post('/api/add-admin', async (req, res) => {
    const { sessionKey, userData } = req.body;
    const session = sessions[sessionKey];

    if (!sessionKey || !session) return res.status(401).json({ message: 'Session not found' });
    if (Date.now() > session.expireTime) return res.status(401).json({ message: 'Session expired' });
    if (session.type !== 'superadmin') return res.status(403).json({ message: 'Access denied. Superadmin only' });

    if (!userData || !userData.username || !userData.type || !userData.department) {
        return res.status(400).json({ message: 'User data is required' });
    }

    try {
        await pool.query(`
            INSERT INTO accounts (fullname, username, password_hash, supplier, type, department, phone)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `, [
            userData.fullname,
            userData.username,
            userData.password_hash,
            "-",            // supplier ‡πÄ‡∏õ‡πá‡∏ô "-"
            userData.type,  // admin ‡∏´‡∏£‡∏∑‡∏≠ superadmin
            userData.department,
            "-"
        ]);

         writeLog(`====================================== SuperAdmin Add Admin Success =================================
‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: sessionKey = ${sessionKey}, type = ${session.type}
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°:
fullname: ${userData.fullname}
username: ${userData.username}
type: ${userData.type}
department: ${userData.department}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        res.json({
            success: true,
            message: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${userData.type} ${userData.username} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
            addedUser: userData
        });
    } catch (err) {
        // Log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Add Admin Error =================================
‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: sessionKey = ${sessionKey}, type = ${session.type}
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°:
fullname: ${userData.fullname}
username: ${userData.username}
type: ${userData.type}
department: ${userData.department}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database Error:', err);
       if (err.code === 'ER_DUP_ENTRY') {
            return res.status(400).json({ message: 'Username already exists' });
        } 
        res.status(500).json({ success: false, message: 'Server Error' });
    }
});

//==========================================================


// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin , SuperAdmin ‡∏î‡∏π ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏î ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order ‡∏´‡∏£‡∏∑‡∏≠  ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order  
app.post('/admin/get-regiscar-data-order', async (req, res) => {
    const { sessionKey, departmentData } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (session.type !== 'admin' && session.type !== 'superadmin') {
        return res.status(403).json({ message: 'Access denied. Admin only' });
    }

    try {

        let rows;

        if(session.type === 'superadmin' || departmentData === 'superadmin'){
            [rows] = await pool.query('SELECT * FROM regiscar');
        }else{
             [rows] = await pool.query(
                'SELECT * FROM regiscar WHERE department = ?',
                [departmentData]
            );
        }

       
        res.json({
            success: true,
            departmentData: departmentData,
            data: rows
        });

         // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Get Regiscar Data Order Success Admin , SuperAdmin ‡∏î‡∏π ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏î ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order ‡∏´‡∏£‡∏∑‡∏≠  ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order   =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Department: ${departmentData}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: ${rows.length || 0}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

    } catch (err) {

        // Log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Get Regiscar Data Order Error Admin , SuperAdmin ‡∏î‡∏π ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏î ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order ‡∏´‡∏£‡∏∑‡∏≠  ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Order   =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Department: ${departmentData}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});


app.post('/admin/get-regiscar-data-order-success', async (req, res) => {//
    const { sessionKey, departmentData } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (session.type !== 'admin' && session.type !== 'superadmin') {
        return res.status(403).json({ message: 'Access denied. Admin only' });
    }

    try {

        let rows;

        if(session.type === 'superadmin' || departmentData === 'superadmin'){
            [rows] = await pool.query('SELECT * FROM regiscar_accepted');
        }else{
             [rows] = await pool.query(
                'SELECT * FROM regiscar_accepted WHERE Department = ?',
                [departmentData]
            );
        }

       
        res.json({
            success: true,
            departmentData: departmentData,
            data: rows
        });


    } catch (err) {


        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});


app.post('/super/get-dataAdmin', async (req, res) => {
    const { sessionKey, departmentData } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {
        const [rows] = await pool.query(
            'SELECT * FROM accounts WHERE type = ?', ['admin']
        );

        res.json({
            success: true,
            departmentData: departmentData,
            data: rows
        });

    } catch (err) {
        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});

app.post('/get-data-User', async (req, res) => {
    const { sessionKey, departmentData } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (session.type !== 'admin' && session.type !== 'superadmin') {
        return res.status(403).json({ message: 'Access denied. Admin only' });
    }

    try {

        let rows;

        if(session.type === 'superadmin' || departmentData === 'superadmin'){
            [rows] = await pool.query('SELECT * FROM accounts WHERE type = ?', ['user']);
        }else{
             [rows] = await pool.query(
                'SELECT * FROM accounts WHERE type = ? AND department = ?',
                ['user',departmentData]
            );
        }

       
        res.json({
            success: true,
            departmentData: departmentData,
            data: rows
        });


    } catch (err) {

        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});


// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö Admin
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö Admin
app.delete('/super/delete-admin', async (req, res) => {
    const { sessionKey, id } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session
    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ 
            success: false,
            message: 'Session not found' 
        });
    }

    const session = sessions[sessionKey];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (Date.now() > session.expireTime) {
        delete sessions[sessionKey];
        return res.status(401).json({ 
            success: false,
            message: 'Session expired' 
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!id) {
        return res.status(400).json({ 
            success: false,
            message: 'ID is required' 
        });
    }

    try {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
        const [result] = await pool.query(
            'DELETE FROM accounts WHERE id = ? AND type = ?',
            [id, 'admin']
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ 
                success: false,
                message: 'Admin not found or already deleted' 
            });
        }

        res.json({
            success: true,
            message: 'Admin deleted successfully',
            deletedId: id
        });

    } catch (err) {
        console.error('Database Error:', err);
        res.status(500).json({ 
            success: false,
            message: 'Server Error'
        });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö user
app.delete('/super/delete-user', async (req, res) => {
    const { sessionKey, id } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session
    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ 
            success: false,
            message: 'Session not found' 
        });
    }

    const session = sessions[sessionKey];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (Date.now() > session.expireTime) {
        delete sessions[sessionKey];
        return res.status(401).json({ 
            success: false,
            message: 'Session expired' 
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!id) {
        return res.status(400).json({ 
            success: false,
            message: 'ID is required' 
        });
    }

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [checkRows] = await pool.query(
            'SELECT id, username FROM accounts WHERE id = ? ',
            [id]
        );

        if (checkRows.length === 0) {
            return res.status(404).json({ 
                success: false,
                message: 'Admin not found' 
            });
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const [result] = await pool.query(
            'DELETE FROM accounts WHERE id = ? AND type = ?',
            [id, 'admin']
        );

        if (result.affectedRows === 0) {
            return res.status(500).json({ 
                success: false,
                message: 'Failed to delete admin' 
            });
        }

        res.json({
            success: true,
            message: 'Admin deleted successfully',
            deletedId: id,
            deletedUsername: checkRows[0].username
        });

    } catch (err) {
        console.error('Database Error:', err);
        res.status(500).json({ 
            success: false,
            message: 'Server Error',
            error: err.message 
        });
    }
});


// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin
app.post('/user/get-btnViewRegisteredData', async (req, res) => {
    const { sessionKey, username } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {
        // ‡∏´‡∏≤ id ‡∏Ç‡∏≠‡∏á user ‡∏à‡∏≤‡∏Å accounts
        const [accountRows] = await pool.query(
            'SELECT id FROM accounts WHERE username = ? LIMIT 1',
            [username]
        );

        if (accountRows.length === 0) {
            return res.status(404).json({ message: 'Username not found in accounts' });
        }

        const id_user = accountRows[0].id;

       // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å regiscar ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
        const [regiscarRows] = await pool.query(
            'SELECT * FROM regiscar WHERE id_user = ?',
            [id_user]
        );

        res.json({
            success: true,
            data: regiscarRows
        });

        // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Get BtnViewRegisteredData Success ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin=================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Username: ${username}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: ${regiscarRows.length || 0}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

    } catch (err) {

         // Log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Get BtnViewRegisteredData Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Username: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});

// Enpoint  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô(‡πÄ‡∏ï‡∏µ‡∏¢‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏á) ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin
app.post('/user/get-btnViewPendingOrders', async (req, res) => {
    const { sessionKey, username } = req.body;

    if (!sessionKey || !sessions[sessionKey]) {
        return res.status(401).json({ message: 'Session not found' });
    }

    const session = sessions[sessionKey];

    if (Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {
        // ‡∏´‡∏≤ id ‡∏Ç‡∏≠‡∏á user ‡∏à‡∏≤‡∏Å accounts
        const [accountRows] = await pool.query(
            'SELECT id FROM accounts WHERE username = ? LIMIT 1',
            [username]
        );

        if (accountRows.length === 0) {
            return res.status(404).json({ message: 'Username not found in accounts' });
        }

        const id_user = accountRows[0].id;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
        const [regiscarRows] = await pool.query(
            'SELECT * FROM regiscar_accepted WHERE id_user = ?',
            [id_user]
        );

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà Status Success
    //     const [regiscarRows] = await pool.query(
    // 'SELECT * FROM regiscar_accepted WHERE id_user = ? AND Status != "Success"',
    // [id_user]
//);

        res.json({
            success: true,
            data: regiscarRows
        });

        // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Get BtnViewPendingOrders Success  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô(‡πÄ‡∏ï‡∏µ‡∏¢‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏á) ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Username: ${username}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: ${regiscarRows.length || 0}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

    } catch (err) {
         // Log ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î Error
        writeLog(`====================================== Get BtnViewPendingOrders Error  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô(‡πÄ‡∏ï‡∏µ‡∏¢‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏á) ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Admin , SuperAdmin =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
Username: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database Error:', err);
        res.status(500).json({ message: 'Server Error' });
    }
});



// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡∏à‡∏≤‡∏Å Admin , SupderAdmin
app.post('/register-accepted', async (req, res) => {
    const { dataList, sessionKey } = req.body;

    const session = sessions[sessionKey];
    if (!session || Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {
        if (!Array.isArray(dataList) || dataList.length === 0) {
            return res.status(400).json({ message: 'No Data provided' });
        }

        const conn = await pool.getConnection();

        try {
            await conn.beginTransaction();

            for (const item of dataList) {
                const {
                    subblier,
                    fullname,
                    typecarTwo,
                    frontPlate,
                    rearPlate,
                    product,
                    department,
                    weightDate,
                    weightTime,
                    id_user,
                    id
                } = item;

                if (!subblier || !fullname || !typecarTwo || !frontPlate || !rearPlate || !product || !weightDate || !weightTime || !id_user) {
                    throw new Error('Missing required fields');
                }

                   //  ‡∏ï‡∏±‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ "-" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å frontPlate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏ü‡∏¥‡∏• frontPlateShort
                //const frontPlateShort = frontPlate.replace(/-/g, '');
                const frontPlateShort = frontPlate.replace(/[-\s]/g, '');


                await conn.query(
                    `INSERT INTO regiscar_accepted
                    (NameSupplier, FullName, TypeCar, FrontPlate, RearPlate, FrontPlateShort, Product, Department, \`Date\`, \`Time\` , Id_user, Status) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                    [subblier, fullname, typecarTwo, frontPlate, rearPlate, frontPlateShort, product, department, weightDate, weightTime, id_user, "Planning"]
                );

                await conn.query('DELETE FROM regiscar WHERE id = ?', [id]);
            }

            //  ‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏ö ‡πÉ‡∏ô regis ‡πÉ‡πâ‡∏´‡πÑ‡∏î‡πâ

            await conn.commit();
 // Log INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            writeLog(`====================================== Register Accepted Success Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡∏à‡∏≤‡∏Å Admin , SupderAdmin =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà INSERT: ${dataList.length}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);            
            res.status(200).json({
                message: 'Data inserted successfully',
                insertedCount: dataList.length
            });

        } catch (err) {
            await conn.rollback();
             // Log Error ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Transaction
            writeLog(`====================================== Register Accepted Error =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Transaction error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

            console.error('Database transaction error:', err);
            res.status(500).json({ message: 'Database error', error: err.message });
        } finally {
            conn.release();
        }

    } catch (err) {

          // Log Error Server
        writeLog(`====================================== Register Accepted Error =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session?.type || 'Unknown'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Server error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

        console.error('Server error:', err);
        res.status(500).json({ message: 'Server error', error: err.message });
    }
});

// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡∏à‡∏≤‡∏Å Admin , SupderAdmin
app.post('/register-rejected', async (req, res) => { 
    const { id, sessionKey } = req.body;

    const session = sessions[sessionKey];
    if (!session || Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    if (!id) return res.status(400).json({ message: 'Missing id' });

    try {
        await pool.query('DELETE FROM regiscar WHERE id = ?', [id]);
        res.status(200).json({ message: 'Data deleted successfully', id: id });

         // Log DELETE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Delete Rejected Success =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session.type}
ID ‡∏ó‡∏µ‡πà‡∏•‡∏ö: ${id}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ DELETE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

    } catch (err) {

         // Log Error ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á DELETE
        writeLog(`====================================== Delete Rejected Error =================================
‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: sessionKey = ${sessionKey}, type = ${session?.type || 'Unknown'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Database delete error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Database delete error:', err);
        res.status(500).json({ message: 'Database error', error: err.message });
    }
});


// Enpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Regsicar 
app.post('/addDataMySQL', async (req, res) => {
    const { dataList, sessionKey, username } = req.body;

    const session = sessions[sessionKey];
    if (!session || Date.now() > session.expireTime) {
        return res.status(401).json({ message: 'Session expired' });
    }

    try {        
        if (!Array.isArray(dataList) || dataList.length === 0) {
            return res.status(400).json({ message: 'No Data provided' });
        }
        
        const conn = await pool.getConnection(); 
        
        try {
            await conn.beginTransaction();

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ id_user ‡∏à‡∏≤‡∏Å accounts
            const [rows] = await conn.query(
                `SELECT id FROM accounts WHERE username = ? LIMIT 1`, // whe use limti , ? 
                [username]
            );

            if (rows.length === 0) {
                throw new Error('Username not found in accounts');
            }

            const id_user = rows[0].id;

            for (const item of dataList) {
                const {
                    subblier,
                    fullname,
                    typecarTwo,
                    frontPlate,
                    rearPlate,
                    product,
                    department,
                    weightDate,
                    weightTime
                } = item;

                if (!subblier || !fullname || !typecarTwo || !frontPlate || !rearPlate || !product || !weightDate || !weightTime) {
                    throw new Error('Missing required fields');
                }

                await conn.query(
                    `INSERT INTO regiscar 
                    (NameSupplier, FullName, TypeCar, FrontPlate, RearPlate, Product, department, \`Date\`, \`Time\`, id_user) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                    [subblier, fullname, typecarTwo, frontPlate, rearPlate, product, department, weightDate, weightTime, id_user]
                );
            }
            
            await conn.commit();

             // Log INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            writeLog(`====================================== Insert regiscar Success =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${username} (sessionKey: ${sessionKey}, type: ${session.type})
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°: ${dataList.length}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
            res.status(200).json({ 
                message: 'Data inserted successfully',
                insertedCount: dataList.length 
            });
            
        } catch (err) {
            await conn.rollback();

             // Log Error ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á INSERT
            writeLog(`====================================== Insert regiscar Error =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${username} (sessionKey: ${sessionKey}, type: ${session?.type || 'Unknown'})
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Database transaction error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);

            console.error('Database transaction error:', err);
            res.status(500).json({ message: 'Database error', error: err.message });
        } finally {
            conn.release();
        }
        
    } catch (err) {

          // Log Error Server
        writeLog(`====================================== Insert regiscar Server Error =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${username} (sessionKey: ${sessionKey}, type: ${session?.type || 'Unknown'})
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Server error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
====================================================================================================
`);
        console.error('Server error:', err);
        res.status(500).json({ message: 'Server error', error: err.message });
    }
});






// ============================== Program Truck-Side ================================================================================


const loginLimiterTokenTruck = rateLimit({
    windowMs: 2 * 60 * 1000, // 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    max: 3, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤)
    message: {
        error: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization']; 
  let token;

  if (authHeader) {
    if (authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1]; // ‡πÅ‡∏ö‡∏ö Bearer
    } else {
      token = authHeader; // ‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà token
    }

    if (!token) return res.status(401).json({ message: 'Token not found' });

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
      if (err) return res.status(403).json({ message: 'Token invalid or expired' });
      req.user = user;
      next();
    });
  } else {
    return res.status(401).json({ message: 'Token not found' });
  }
}


// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ß‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô user ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ù‡∏±‡πà‡∏á‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß 
app.post('/registerforuserTruck', async (req, res) => {
    try {
        const { user, password } = req.body;

        if (!user || !password) {
            return res.status(400).json({ message: 'Username and password are required' });
        }

        const password_hash = await bcrypt.hash(password, 10); 

        const [result] = await pool.execute(
            'INSERT INTO userlocalprogram (user, password_hash) VALUES (?, ?)',
            [user, password_hash]
        );

        res.status(201).json({ message: ' ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß', userId: result.insertId });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Server error' });
    }
});


app.post('/login' ,loginLimiterTokenTruck , async (req, res) => { // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login ‡∏Ç‡∏≠ Token ‡∏ù‡∏±‡πà‡∏á Truck 
  const { user, password } = req.body;

  try {
    const [rows] = await pool.query('SELECT * FROM userlocalprogram WHERE user = ?', [user]);
    if (rows.length === 0) {
      return res.status(401).json({ message: 'User not found' });
    }

    const dbUser = rows[0];

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
    // const match = await bcrypt.compare(password, dbUser.password_hash);
    // if (!match) {
    //   return res.status(401).json({ message: 'Invalid password' });
    // }

    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏£‡∏±‡∏™
    if (password !== dbUser.password_hash) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ column ‡πÄ‡∏õ‡πá‡∏ô password ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ dbUser.password
      return res.status(401).json({ message: 'Invalid password' });
    }


    const token = jwt.sign(
      { id: dbUser.id, user: dbUser.user },
      process.env.JWT_SECRET,
      { expiresIn: '15m' }   // Token ‡∏≠‡∏≤‡∏¢‡∏∏ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    );
    res.json({ token });

     // Log login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== Login Truck Success =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${user}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, Token ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);

  } catch (err) {

     // Log Error Server
        writeLog(`====================================== Login Truck Server Error =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${user || 'Unknown'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Server error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
});

// get data ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ‡πÑ‡∏î‡πâ Token
app.get('/users', authenticateToken, loginLimiterTokenTruck , async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å table regiscar
    const [rows] = await pool.query('SELECT * FROM regiscar_accepted')

     // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        writeLog(`====================================== SELECT regiscar_accepted Success =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${req.user.user}  // req.user ‡∏°‡∏≤‡∏à‡∏≤‡∏Å authenticateToken
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${rows.length}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
    res.json(rows);

  } catch (err) {
     // Log Error
        writeLog(`====================================== SELECT regiscar_accepted Error =================================
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${req.user ? req.user.user : 'Unknown'}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Database error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
    console.error("Database error:", err);
    res.status(500).json({ message: 'Server error' });
  }
});


// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status
/*
app.post('/users/update-status',  async (req, res) => {
  try {
    const { id , Status } = req.body; // ‡∏£‡∏±‡∏ö id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï

    if (!id && !Status) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå status ‡∏à‡∏≤‡∏Å Pending ‚Üí Success
    const [result] = await pool.query(
      'UPDATE regiscar_accepted SET Status = "Success" WHERE id = ? AND Status = "Pending"',
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Pending ‡∏ï‡∏≤‡∏° id ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
    }

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', id, newStatus: 'Success' });
  } catch (err) {
    console.error('‚ùå Database error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});
*/

app.post('/users/update-status', async (req, res) => {
  try {
    const { Id, Status } = req.body; // ‡∏£‡∏±‡∏ö id ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ Status ‡∏à‡∏≤‡∏Å body

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
    if (!Id || !Status) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id ‡πÅ‡∏•‡∏∞ Status ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Status ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    const [result] = await pool.query(
      'UPDATE regiscar_accepted SET Status = ? WHERE id = ?',
      [Status, Id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° id ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
    }

      // Log UPDATE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    writeLog(`====================================== UPDATE regiscar_accepted Success =================================
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ UPDATE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
id: ${Id}
‡∏Ñ‡πà‡∏≤ Status ‡πÉ‡∏´‡∏°‡πà: ${Status}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', Id, newStatus: Status });

  } catch (err) {
    // Log Error Database
    writeLog(`====================================== UPDATE regiscar_accepted Error =================================
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Database error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
    console.error('‚ùå Database error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});




// ============================== Program Truck-Side END ===============================================================================


// ‡∏™‡∏≥‡∏™‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡∏Å‡∏£‡∏¥‡∏ô
// app.post('/querygetdatacar', async (req, res) => {
//   try {
//     const { FrontPlateShort, Status } = req.body; // ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡πà‡∏≤
//     if (!FrontPlateShort && !Status) {
//       return res.status(400).json({ message: 'Please provide FrontPlateShort or Status for search' });
//     }

//     let query = 'SELECT * FROM regiscar_accepted WHERE 1=1';
//     const params = [];

//     if (FrontPlateShort) {
//       query += ' AND FrontPlateShort = ?';
//       params.push(FrontPlateShort);
//     }

//     if (Status) {
//       query += ' AND Status = ?';
//       params.push(Status);
//     }

//     const [rows] = await pool.query(query, params);

//     if (rows.length === 0) {
//       return res.status(202).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
//     }

//     res.status(200).json({const:rows.length,message : rows});

//   } catch (err) {
//     console.error("Database error:", err);
//     res.status(500).json({ message: 'Server error', error: err.message });
//   }
// });

app.post('/querygetdatacar', async (req, res) => {
  try {
    const { FrontPlateShort, Status } = req.body; 

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡πà‡∏≤
    if (!FrontPlateShort && !Status) {
      return res.status(400).json({ message: 'Please provide FrontPlateShort or Status for search' });
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD)
    const currentDate = new Date().toISOString().slice(0, 10);

    let query = 'SELECT * FROM regiscar_accepted WHERE 1=1';
    const params = [];

    if (FrontPlateShort) {
      query += ' AND FrontPlateShort = ?';
      params.push(FrontPlateShort);
    }

    if (Status) {
      query += ' AND Status = ?';
      params.push(Status);
    }

    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    query += ' AND DATE(`Date`) = ?';
    params.push(currentDate);

    const [rows] = await pool.query(query, params);

    if (rows.length === 0) {

          // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      writeLog(`====================================== QUERY regiscar_accepted =================================
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
FrontPlateShort: ${FrontPlateShort || "-"}
Status: ${Status || "-"}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${currentDate}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
      return res.status(202).json({ message: `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${currentDate} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•` });
    }

    // res.status(200).json({
    //   date: currentDate,
    //   count: rows.length,
    //   message: rows
    // });

     // Log SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    writeLog(`====================================== QUERY regiscar_accepted =================================
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ SELECT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
FrontPlateShort: ${FrontPlateShort || "-"}
Status: ${Status || "-"}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${currentDate}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${rows.length}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);

    res.status(200).json({const:rows.length,message : rows});

  } catch (err) {

    // Log Database Error
    writeLog(`====================================== QUERY regiscar_accepted Error =================================
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ö†Ô∏è Database error
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${err.message}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
==============================================================================================
`);
    console.error("Database error:", err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
});


app.get('/getdataCar', async (req, res)=>{
    const results = await pool.query('SELECT * FROM regiscar')
    res.json(results[0])
});


app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
    console.log(`API Endpoints:`);
    console.log(`POST /api/generatecode - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™`);
    console.log(`POST /api/verify-code - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™`);
    console.log(`GET /api/codes - ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);
});




